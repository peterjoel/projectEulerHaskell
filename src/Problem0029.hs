-----------------------------------------------------------------------------
--
--  Project Euler 29
--
--
--    Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:
--
--        22=4, 23=8, 24=16, 25=32
--        32=9, 33=27, 34=81, 35=243
--        42=16, 43=64, 44=256, 45=1024
--        52=25, 53=125, 54=625, 55=3125
--
--    If they are then placed in numerical order, with any repeats removed, 
--    we get the following sequence of 15 distinct terms:
--
--    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
--
--    How many distinct terms are in the sequence generated by a^b for 2 <= a <= 
--    100 and 2 <= b <= 100?
--
--
-----------------------------------------------------------------------------

{-
    Brute force, but fast 'enough'. 
    Sorting and grouping is a lot faster than using nub to remove duplicates.
    This runs in < 0.02 seconds (vs ~1 sec with nub)
-}
module Problem0029 (
    run
) where

import Data.List 

run :: IO Int
run = return $ (length . dedupe) [ a^b | a <- [2..100], b <- [2..100] ]

dedupe :: Ord a => [a] -> [a]
-- dedupe = nub
dedupe = map head . group . sort