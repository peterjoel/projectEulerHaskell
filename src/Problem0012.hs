-----------------------------------------------------------------------------
--
--    Project Euler 0012
--   
--    The sequence of triangle numbers is generated by adding the 
--    natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
--    The first ten terms would be:
--
--    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
--
--    Let us list the factors of the first seven triangle numbers:
--
--         1: 1
--         3: 1,3
--         6: 1,2,3,6
--        10: 1,2,5,10
--        15: 1,3,5,15
--        21: 1,3,7,21
--        28: 1,2,4,7,14,28
--
--    We can see that 28 is the first triangle number to have over five divisors.
--
--    What is the value of the first triangle number to have over five hundred divisors?
--
-----------------------------------------------------------------------------


module Problem0012 (
 run
) where

import Num.Primes

run :: IO Int
run = return $ findDiv 500

findDiv :: Int -> Int
findDiv n = head $ filter (\t -> numDivisors t > n) triangles

triangles :: [Int]
triangles = [(1+n) * n `div` 2 | n <- [1..]] 

numDivisors :: Int -> Int
-- don't need to actually find the divisors, just need to count them
numDivisors n = foldl (\a b -> a*(b+1)) 1 powers
             where (_, powers) = unzip $ factorize n

